import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import hlink
from config import BOT_TOKEN
from llm import GigaChatInterface


model = GigaChatInterface()

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    waiting_for_request = State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", "–ó–∞–¥–∞—á–∏", "–ò–¥–µ–∏"]
    keyboard.add(*buttons)
    await message.answer("<b>–ü—Ä–∏–≤–µ—Ç!</b>üëã\n"
                         "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π. ü§ñ\n"
                         "–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å:\n"
                         "1. –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –ø–æ —Å–≤–æ–µ–º—É –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏;\n"
                         "2. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ –∏ –º—ã—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏;\n"
                         "3. –ö–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –≤–æ–∑–Ω–∏–∫–∞–µ–º—ã–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º.\n"
                         f"{hlink('AI-Arrow', 'ai-arrow-camp.com')}",
                         reply_markup=keyboard, parse_mode="html")


@dp.message_handler(lambda message: message.text in ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", "–ó–∞–¥–∞—á–∏", "–ò–¥–µ–∏"])
async def process_option(message: types.Message, state: FSMContext):
    await state.update_data(selected_option=message.text)
    await Form.waiting_for_request.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...")


@dp.message_handler(state=Form.waiting_for_request)
async def process_request(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    selected_option = user_data.get('selected_option')
    user_request = message.text
    if selected_option == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ":
        response = model.project_struct(user_request)
    elif selected_option == "–ó–∞–¥–∞—á–∏":
        response = model.task_struct(user_request)
    elif selected_option == "–ò–¥–µ–∏":
        response = model.idea_struct(user_request)
    await message.answer(response)
    await state.finish()
